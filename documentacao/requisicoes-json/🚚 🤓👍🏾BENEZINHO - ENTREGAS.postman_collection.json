{
	"info": {
		"_postman_id": "d7adf59e-6e2a-4e23-951f-9df420adfce5",
		"name": "üöö ü§ìüëçüèæBENEZINHO - ENTREGAS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1524675"
	},
	"item": [
		{
			"name": "001 - PESSOA",
			"item": [
				{
					"name": "localhost/pessoa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has properties 'id', 'nome', 'email', and 'nascimento'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('nome');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('nascimento');\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Response has valid 'id', 'nome', 'email', and 'nascimento' properties\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number');\r",
									"    pm.expect(responseData.nome).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.email).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.nascimento).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, \"Email should be in a valid format\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Nascimento date is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"ID should be a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Benefrancis do Nascimento\",\r\n    \"email\": \"benefrancis@gmail.com\",\r\n    \"nascimento\": \"1977-03-08\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/pessoa",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						},
						"description": "\n### Add Pessoa\nThis endpoint allows you to add a new pessoa.\n\n#### Request Body\n- `nome` (string, required): The name of the pessoa.\n- `email` (string, required): The email address of the pessoa.\n- `nascimento` (string, required): The date of birth of the pessoa.\n\n#### Response\n- Status: 200 OK\n- Content-Type: application/json\n- `id` (number): The unique identifier of the added pessoa.\n- `nome` (string): The name of the added pessoa.\n- `email` (string): The email address of the added pessoa.\n- `nascimento` (string): The date of birth of the added pessoa.\n\n"
					},
					"response": []
				},
				{
					"name": "http://localhost/pessoa",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a JSON object with id, nome, email, and nascimento properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('nome');\r",
									"    pm.expect(jsonData).to.have.property('email');\r",
									"    pm.expect(jsonData).to.have.property('nascimento');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.email).to.match(/^.+@.+\\..+$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Nascimento is in a valid date format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"nome\": \"Paulo Henrique\",\r\n    \"email\": \"ph@gmail.com\",\r\n    \"nascimento\": \"2005-04-11\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost/pessoa",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							]
						}
					},
					"response": []
				},
				{
					"name": "PESSOA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 250ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Each element in the array has id, nome, email, and nascimento properties\", function () {\r",
									"    pm.response.json().forEach(function(person) {\r",
									"        pm.expect(person).to.have.property('id');\r",
									"        pm.expect(person).to.have.property('nome');\r",
									"        pm.expect(person).to.have.property('email');\r",
									"        pm.expect(person).to.have.property('nascimento');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost/pessoa?nome=enzo oliveira&nascimento=2005-04-11",
							"host": [
								"localhost"
							],
							"path": [
								"pessoa"
							],
							"query": [
								{
									"key": "nome",
									"value": "enzo oliveira"
								},
								{
									"key": "nascimento",
									"value": "2005-04-11"
								}
							]
						},
						"description": "\nThis endpoint sends an HTTP GET request to localhost/pessoa and returns a 200 status with a JSON response. The response contains an array of objects with keys for \"id\", \"nome\", \"email\", and \"nascimento\". Each object represents a person with their respective details. \n"
					},
					"response": []
				}
			]
		},
		{
			"name": "002 - ENDERECO",
			"item": [
				{
					"name": "localhost/endereco  1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"pm.test(\"Response has an id property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"});",
									"",
									"pm.test(\"Response has a cep property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('cep');",
									"});",
									"",
									"pm.test(\"Response has a pessoa object with id, nome, email, and nascimento properties\", function () {",
									"    var pessoa = pm.response.json().pessoa;",
									"    pm.expect(pessoa).to.be.an('object').that.has.all.keys('id', 'nome', 'email', 'nascimento');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate the cep is a valid Brazilian zip code format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.cep).to.match(/^\\d{5}-\\d{3}$/);",
									"});",
									"",
									"",
									"pm.test(\"Pessoa's email is in a valid email format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.pessoa.email).to.be.a('string');",
									"  pm.expect(responseData.pessoa.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
									"});",
									"",
									"",
									"pm.test(\"Pessoa's nascimento is a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.pessoa.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cep\": \"06086-120\",\r\n    \"numero\": \"505\",\r\n    \"complemento\": \"AP 82\",\r\n    \"pessoa\": {\r\n      \"id\" : 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/endereco",
							"host": [
								"localhost"
							],
							"path": [
								"endereco"
							]
						},
						"description": "\nThis endpoint is a POST request to localhost/endereco, which is used to add address information. The request body should be in raw JSON format and include the fields \"cep\", \"numero\", \"complemento\", and \"pessoa\" with its subfield \"id\". The response will have a status code of 200 and a content type of application/json. The response body will include the same fields as the request, along with additional fields \"nome\", \"email\", and \"nascimento\" within the \"pessoa\" object.\n"
					},
					"response": []
				},
				{
					"name": "localhost/endereco  2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");",
									"});",
									"",
									"pm.test(\"Response has an id property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"});",
									"",
									"pm.test(\"Response has a cep property\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('cep');",
									"});",
									"",
									"pm.test(\"Response has a pessoa object with id, nome, email, and nascimento properties\", function () {",
									"    var pessoa = pm.response.json().pessoa;",
									"    pm.expect(pessoa).to.be.an('object').that.has.all.keys('id', 'nome', 'email', 'nascimento');",
									"});",
									"",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.id).to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Validate the cep is a valid Brazilian zip code format\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.cep).to.match(/^\\d{5}-\\d{3}$/);",
									"});",
									"",
									"",
									"pm.test(\"Pessoa's email is in a valid email format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.pessoa.email).to.be.a('string');",
									"  pm.expect(responseData.pessoa.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/);",
									"});",
									"",
									"",
									"pm.test(\"Pessoa's nascimento is a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.pessoa.nascimento).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cep\": \"05818-250\",\r\n    \"numero\": \"39\",\r\n    \"complemento\": \"CS 3\",\r\n    \"pessoa\": {\r\n      \"id\" : 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/endereco",
							"host": [
								"localhost"
							],
							"path": [
								"endereco"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost/endereco/pessoa - COM ID EXISTENTE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response has Content-Type header application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response is an array with objects\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item).to.be.an('object');",
									"    });",
									"});",
									"",
									"pm.test(\"Each object in the array has specific properties\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('cep');",
									"        pm.expect(item).to.have.property('numero');",
									"        pm.expect(item).to.have.property('complemento');",
									"        pm.expect(item).to.have.property('pessoa').that.is.an('object');",
									"        pm.expect(item.pessoa).to.have.property('id');",
									"        pm.expect(item.pessoa).to.have.property('nome');",
									"        pm.expect(item.pessoa).to.have.property('email');",
									"        pm.expect(item.pessoa).to.have.property('nascimento');",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"",
									"",
									"var template = `",
									"<canvas id=\"myChart\" height=\"75\"></canvas>",
									"",
									"<script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js\"></script> ",
									"",
									"<script>",
									"    var ctx = document.getElementById(\"myChart\");",
									"",
									"    var myChart = new Chart(ctx, {",
									"        type: \"line\",",
									"        data: {",
									"            labels: [],",
									"            datasets: [{",
									"                data: [],",
									"                ",
									"                // Change these colours to customize the chart",
									"                borderColor: \"#003f5c\",",
									"                backgroundColor: \"rgba(0,63,92,0.2)\",",
									"                pointBackgroundColor: \"#003f5c\",",
									"                pointBorderColor: \"#003f5c\"",
									"            }]",
									"        },",
									"        options: {",
									"            legend: { display: false },",
									"            title: {",
									"                display: true,",
									"                text: 'Line Chart'",
									"            },",
									"            scales: {",
									"                xAxes: [{",
									"                    display: true,",
									"                    scaleLabel: {",
									"                        display: true,",
									"                        labelString: 'X-Axis Label'",
									"                    }",
									"                }],",
									"                yAxes: [{",
									"                    display: true,",
									"                    scaleLabel: {",
									"                        display: true,",
									"                        labelString: 'Y-Axis Label'",
									"                    }",
									"                }]",
									"            }",
									"        }",
									"",
									"    });",
									"",
									"    // Access the data passed to pm.visualizer.set() from the JavaScript",
									"    // code of the Visualizer template",
									"    pm.getData(function (err, value) {",
									"        myChart.data.datasets[0].data = value.response.data.map((item) => item.id);",
									"        myChart.data.labels = value.response.data.map((item) => item.cep);",
									"        myChart.update();",
									"    });",
									"",
									"</script>`;",
									"",
									"function constructVisualizerPayload() {",
									"    var res = pm.response.json();",
									"    ",
									"    var visualizerData = {",
									"        ",
									"        // Data takes an array of numbers",
									"        data: res",
									"    };",
									"",
									"    return {response: visualizerData};",
									"}",
									"",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost/endereco/pessoa/1",
							"host": [
								"localhost"
							],
							"path": [
								"endereco",
								"pessoa",
								"1"
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve the address information for a specific person with ID 1. The response is in JSON format with a 200 status code. The response body includes an array of objects, each containing the ID, postal code (CEP), house number, complement, and details of the person including their ID, name, email, and date of birth.\n"
					},
					"response": []
				},
				{
					"name": "localhost/endereco/cep - COM CEP EXISTENTE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"pm.test(\"Response has Content-Type header with value application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"pm.test(\"Each element in the array has properties id, cep, numero, complemento, and pessoa\", function () {",
									"    pm.response.json().forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('cep');",
									"        pm.expect(item).to.have.property('numero');",
									"        pm.expect(item).to.have.property('complemento');",
									"        pm.expect(item).to.have.property('pessoa');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each 'id' in the response array is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.id).to.be.a('number');",
									"        pm.expect(item.id).to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each 'cep' in the response array is a valid Brazilian zip code format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.cep).to.match(/^\\d{5}-\\d{3}$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each 'numero' in the response array is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.numero).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Each complemento in the response array should be a non-empty string or null\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.complemento).to.satisfy(function (value) {",
									"            return typeof value === 'string' || value === null;",
									"        });",
									"    });",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost/endereco/cep/06086-120",
							"host": [
								"localhost"
							],
							"path": [
								"endereco",
								"cep",
								"06086-120"
							]
						},
						"description": "\nThis endpoint makes an HTTP GET request to retrieve address details based on the provided postal code (CEP). The response is in JSON format and includes an array of objects containing address details such as ID, postal code, number, complement, and person information including ID, name, email, and date of birth.\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "003 - PRODUTO",
			"item": [
				{
					"name": "localhost/produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									" ",
									" pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									" ",
									"",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"pm.test(\"Response has id, etiqueta, nome, peso, largura, altura, and profundidade properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('etiqueta');",
									"    pm.expect(jsonData).to.have.property('nome');",
									"    pm.expect(jsonData).to.have.property('peso');",
									"    pm.expect(jsonData).to.have.property('largura');",
									"    pm.expect(jsonData).to.have.property('altura');",
									"    pm.expect(jsonData).to.have.property('profundidade');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \r\n  \"nome\": \"Iphone 15\",\r\n  \"etiqueta\": \"IP-2024-kjhas√ßdflkhasd√ßjhf√ßjkasdh√ßjk\",\r\n  \"peso\": 1,\r\n  \"altura\": 15,\r\n  \"largura\": 2,\r\n  \"profundidade\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/produto",
							"host": [
								"localhost"
							],
							"path": [
								"produto"
							]
						},
						"description": "\n  \n### Add a New Product\n\nThis endpoint allows you to add a new product to the system.\n\n#### Request Body\n- `nome` (string): The name of the product.\n- `etiqueta` (string): The label of the product.\n- `peso` (number): The weight of the product.\n- `altura` (number): The height of the product.\n- `largura` (number): The width of the product.\n- `profundidade` (number): The depth of the product.\n\n#### Response\nUpon successful addition of the product, the server will respond with the details of the newly added product including its unique `id`, `nome`, `etiqueta`, `peso`, `altura`, `largura`, and `profundidade`.\n\n"
					},
					"response": []
				},
				{
					"name": "localhost/produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 250ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array of products\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(function(product) {\r",
									"        pm.expect(product).to.have.property('id');\r",
									"        pm.expect(product).to.have.property('etiqueta');\r",
									"        pm.expect(product).to.have.property('nome');\r",
									"        pm.expect(product).to.have.property('peso');\r",
									"        pm.expect(product).to.have.property('largura');\r",
									"        pm.expect(product).to.have.property('altura');\r",
									"        pm.expect(product).to.have.property('profundidade');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost/produto?etiqueta=87f28a87-f3bb-4a25-af10-070a92d28120",
							"host": [
								"localhost"
							],
							"path": [
								"produto"
							],
							"query": [
								{
									"key": "peso",
									"value": "1",
									"disabled": true
								},
								{
									"key": "nome",
									"value": "Iphone 15",
									"disabled": true
								},
								{
									"key": "etiqueta",
									"value": "87f28a87-f3bb-4a25-af10-070a92d28120"
								}
							]
						},
						"description": "# Get Product Information\n\nThis endpoint sends an HTTP GET request to retrieve product information from the server.\n\n### Response\n\n- Status: 200\n- Content-Type: application/json\n    \n\nThe response body contains an array of objects, where each object represents a product and includes the following fields:\n\n- `id` (number): The unique identifier of the product.\n- `etiqueta` (string): The product label.\n- `nome` (string): The name of the product.\n- `peso` (number): The weight of the product.\n- `largura` (number): The width of the product.\n- `altura` (number): The height of the product.\n- `profundidade` (number): The depth of the product.\n    \n\nExample response:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"etiqueta\": \"\",\n        \"nome\": \"\",\n        \"peso\": 0,\n        \"largura\": 0,\n        \"altura\": 0,\n        \"profundidade\": 0\n    }\n]\n\n ```"
					},
					"response": []
				},
				{
					"name": "localhost/produto - COM ID EXISTENTE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 250ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is in JSON format\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has id, etiqueta, nome, peso, largura, altura, and profundidade properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('id');\r",
									"    pm.expect(jsonData).to.have.property('etiqueta');\r",
									"    pm.expect(jsonData).to.have.property('nome');\r",
									"    pm.expect(jsonData).to.have.property('peso');\r",
									"    pm.expect(jsonData).to.have.property('largura');\r",
									"    pm.expect(jsonData).to.have.property('altura');\r",
									"    pm.expect(jsonData).to.have.property('profundidade');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost/produto/1",
							"host": [
								"localhost"
							],
							"path": [
								"produto",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "004 - PASSAGEIRO",
			"item": [
				{
					"name": "localhost/passageiro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 250ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
									"});\r",
									"\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pessoa\": {\r\n        \"nome\": \"Pessoa sem ID\",\r\n        \"email\": \"psemid@gmail.com\",\r\n        \"nascimento\": \"2017-05-03\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/passageiro",
							"host": [
								"localhost"
							],
							"path": [
								"passageiro"
							]
						},
						"description": "\nThis endpoint allows you to create a new \"passageiro\" (passenger) by sending an HTTP POST request to localhost/passageiro. The request should include a JSON payload with the \"pessoa\" (person) object containing \"nome\" (name), \"email\", and \"nascimento\" (birth date) fields.\n\n### Request Body\n- pessoa (object)\n  - nome (string): The name of the passenger\n  - email (string): The email of the passenger\n  - nascimento (string): The birth date of the passenger\n\n### Response\nUpon a successful execution, the server will respond with a status code of 200 and a JSON object containing the newly created \"passageiro\" with its unique \"id\", along with the details of the associated \"pessoa\" including their \"id\", \"nome\", \"email\", and \"nascimento\" fields.\n\nExample:\n```json\n{\n  \"id\": 0,\n  \"pessoa\": {\n    \"id\": 0,\n    \"nome\": \"\",\n    \"email\": \"\",\n    \"nascimento\": \"\"\n  }\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "localhost/passageiro - COM ID EXISTENTE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pessoa\": {\r\n        \"id\": 1\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/passageiro",
							"host": [
								"localhost"
							],
							"path": [
								"passageiro"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost/passageiro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 250ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array of objects with id and pessoa properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.be.an('object').that.has.all.keys('id', 'pessoa');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost/passageiro",
							"host": [
								"localhost"
							],
							"path": [
								"passageiro"
							]
						},
						"description": "This endpoint retrieves information about passengers. The response will be in JSON format and will include the passenger's ID, name, date of birth, and email."
					},
					"response": []
				}
			]
		},
		{
			"name": "005 - VIAGEM",
			"item": [
				{
					"name": "localhost/viagem - COM NOVOS OBJETOS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response status code",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"pm.test(\"Response is an object with id, saida, chegada, cliente, destino, origem, passageiros, and produtos properties\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('id', 'saida', 'chegada', 'cliente', 'destino', 'origem', 'passageiros', 'produtos');",
									"});",
									"",
									" ",
									" ",
									"",
									"",
									" ",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"saida\": \"2024-03-28T19:00\",\r\n    \"chegada\": \"2024-03-28T19:40\",\r\n    \"cliente\": {\r\n        \"nome\": \"Erick Sudr√© do Nascimento\",\r\n        \"email\": \"erick.sudre@gmail.com\",\r\n        \"nascimento\": \"2006-01-06\"\r\n    },\r\n    \"destino\": {\r\n        \"cep\": \"01311-000\",\r\n        \"numero\": \"1106\",\r\n        \"complemento\": \"7¬∫ andar - Bela Vista\"\r\n    },\r\n    \"origem\": {\r\n        \"cep\": \"01538-001\",\r\n        \"numero\": \"1222\",\r\n        \"complemento\": \"\"\r\n    },\r\n    \"passageiros\": [\r\n        {\r\n            \"pessoa\": {\r\n                \"nome\": \"Erick Sudr√© do Nascimento\",\r\n                \"email\": \"erick.sudre@gmail.com\",\r\n                \"nascimento\": \"2006-01-06\"\r\n            }\r\n        }\r\n    ],\r\n    \"produtos\": [\r\n        {\r\n            \"etiqueta\": \"TESTE_NEW_PRODUTO\",\r\n            \"nome\": \"Livro: Dominando o Hibernate\",\r\n            \"peso\": 0.5,\r\n            \"largura\": 1.02,\r\n            \"altura\": 0.5,\r\n            \"profundidade\": 1\r\n        }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/viagem",
							"host": [
								"localhost"
							],
							"path": [
								"viagem"
							]
						},
						"description": "\nThis API endpoint allows you to create a new travel record by sending an HTTP POST request to `localhost/viagem`. The request should include the details of the travel such as departure, arrival, client information, destination, origin, passengers, and products.\n\n### Request Body\n- `saida` (string): Departure information\n- `chegada` (string): Arrival information\n- `cliente` (object): Client details including name, email, and birthdate\n- `destino` (object): Destination details including postal code, number, and complement\n- `origem` (object): Origin details including postal code, number, and complement\n- `passageiros` (array): Array of passengers with their name, email, and birthdate\n- `produtos` (array): Array of products with label, name, weight, width, height, and depth\n\n### Response\nUpon successful creation, the API responds with a status code of 200 and a JSON object containing the newly created travel record's ID along with the details provided in the request.\n\nExample Response:\n```json\n{\n    \"id\": 0,\n    \"saida\": \"\",\n    \"chegada\": \"\",\n    \"cliente\": {\n        \"id\": 0,\n        \"nome\": \"\",\n        \"email\": \"\",\n        \"nascimento\": \"\"\n    },\n    \"destino\": {\n        \"id\": 0,\n        \"cep\": \"\",\n        \"numero\": \"\",\n        \"complemento\": \"\",\n        \"pessoa\": null\n    },\n    \"origem\": {\n        \"id\": 0,\n        \"cep\": \"\",\n        \"numero\": \"\",\n        \"complemento\": \"\",\n        \"pessoa\": null\n    },\n    \"passageiros\": [\n        {\n            \"id\": 0,\n            \"pessoa\": {\n                \"id\": 0,\n                \"nome\": \"\",\n                \"email\": \"\",\n                \"nascimento\": \"\"\n            }\n        }\n    ],\n    \"produtos\": [\n        {\n            \"id\": 0,\n            \"etiqueta\": \"\",\n            \"nome\": \"\",\n            \"peso\": 0,\n            \"largura\": 0,\n            \"altura\": 0,\n            \"profundidade\": 0\n        }\n    ]\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "localhost/viagem - COM IDS EXISTENTES",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Fixed response status code\r",
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 250ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an object with id, saida, chegada, cliente, destino, origem, passageiros, and produtos properties\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object').that.has.all.keys('id', 'saida', 'chegada', 'cliente', 'destino', 'origem', 'passageiros', 'produtos');\r",
									"});\r",
									"\r",
									" \r",
									" \r",
									"\r",
									"\r",
									" \r",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cliente\": {\r\n        \"id\": 1\r\n    },\r\n    \"passageiros\": [\r\n        {\r\n            \"id\": 1\r\n        }\r\n    ],\r\n    \"produtos\": [\r\n        {\r\n            \"id\": 1\r\n        }\r\n    ],\r\n    \"origem\": {\r\n        \"id\": 1\r\n    },\r\n    \"destino\": {\r\n        \"id\": 2\r\n    },\r\n    \"saida\": \"2024-03-28T19:00\",\r\n    \"chegada\": \"2024-03-28T19:40\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost/viagem",
							"host": [
								"localhost"
							],
							"path": [
								"viagem"
							]
						}
					},
					"response": []
				},
				{
					"name": "localhost/viagem",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(item) {\r",
									"        pm.expect(item).to.include.all.keys('id', 'saida', 'chegada', 'cliente', 'destino', 'origem', 'passageiros', 'produtos');\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									" \r",
									"\r",
									"\r",
									"pm.test(\"Response Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									" \r",
									"\r",
									"pm.test(\"Cliente's email is in a valid email format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('array');\r",
									"    responseData.forEach(function(viagem) {\r",
									"        pm.expect(viagem.cliente.email).to.match(/\\S+@\\S+\\.\\S+/);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost/viagem?destino.cep=01311-000",
							"host": [
								"localhost"
							],
							"path": [
								"viagem"
							],
							"query": [
								{
									"key": "destino.cep",
									"value": "01311-000"
								},
								{
									"key": "cliente.id",
									"value": "4",
									"disabled": true
								}
							]
						},
						"description": "# Viagem Details\n\nThis endpoint makes an HTTP GET request to localhost/viagem and returns details about a trip.\n\n## Response\n\nUpon a successful request, the endpoint returns a status code of 200 and the response body contains a JSON array with trip details. Each trip object in the array includes the trip ID, client information, passenger details, product information, origin and destination details, as well as departure and arrival timestamps.\n\nExample response body:\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"cliente\": {\n            \"id\": 0,\n            \"nome\": \"\",\n            \"nascimento\": \"\",\n            \"email\": \"\"\n        },\n        \"passageiros\": [],\n        \"produtos\": [\n            {\n                \"id\": 0,\n                \"etiqueta\": \"\",\n                \"nome\": \"\",\n                \"peso\": 0,\n                \"largura\": 0,\n                \"altura\": 0,\n                \"profundidade\": 0\n            }\n        ],\n        \"origem\": {\n            \"id\": 0,\n            \"pessoa\": null,\n            \"cep\": \"\",\n            \"numero\": \"\",\n            \"complemento\": \"\"\n        },\n        \"destino\": {\n            \"id\": 0,\n            \"pessoa\": null,\n            \"cep\": \"\",\n            \"numero\": \"\",\n            \"complemento\": \"\"\n        },\n        \"saida\": \"\",\n        \"chegada\": \"\"\n    }\n]\n\n ```"
					},
					"response": []
				}
			]
		}
	]
}